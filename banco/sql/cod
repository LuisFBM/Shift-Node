CREATE DATABASE IF NOT EXISTS shift_node;
USE shift_node;
select * from horarios_disponiveis;
#drop database shift_node;

CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    senha VARCHAR(255) NOT NULL,
    telefone VARCHAR(20),
    cpf VARCHAR(14) UNIQUE,
    tipo ENUM('CLIENTE', 'ATENDENTE', 'MECANICO', 'ADMIN'),
    ativo BOOLEAN DEFAULT TRUE,
    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE veiculos (
    id_veiculo INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    nome VARCHAR(100),
    ano YEAR NOT NULL,
    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario)
        REFERENCES usuarios (id)
        ON DELETE CASCADE
);

CREATE TABLE servicos (
    id_servico INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    descricao VARCHAR(255),
    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE agendamentos (
    id_agendamento INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_veiculo INT NOT NULL,
    data_agendamento DATE NOT NULL,
    hora TIME NOT NULL,
    observacoes VARCHAR(100),
    tipo_servico ENUM(
        'Verificar nível de fluídos',
        'Trocar óleo do motor e filtro',
        'Trocar fluído de freio',
        'Trocar fluído de arrefecimento',
        'Revisão completa de freios',
        'Verificar pastilhas de freio',
        'Trocar discos e tambores de freio'
    ),
    status ENUM('Pendente', 'Confirmado', 'Cancelado') DEFAULT 'Pendente',
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario)
        REFERENCES usuarios (id),
    FOREIGN KEY (id_veiculo)
        REFERENCES veiculos (id_veiculo)
);

CREATE TABLE horarios_disponiveis (
    id_horario INT AUTO_INCREMENT PRIMARY KEY,
    hora TIME NOT NULL,
	status ENUM('disponível','ocupado') DEFAULT 'disponível'
);

-- Atualizar status

DELIMITER $$

CREATE PROCEDURE atualizar_status_agendamento(
    IN p_id_agendamento INT,
    IN p_status ENUM('Pendente','Confirmado','Cancelado')
)
BEGIN
    UPDATE agendamentos
    SET status = p_status
    WHERE id_agendamento = p_id_agendamento;
END $$

DELIMITER ;

-- Contagem de Agendamentos

DELIMITER $$

CREATE PROCEDURE contar_agendamentos_por_status()
BEGIN
    SELECT status, COUNT(*) AS total
    FROM agendamentos
    GROUP BY status;
END $$

DELIMITER ;