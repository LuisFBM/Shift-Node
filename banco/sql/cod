CREATE DATABASE IF NOT EXISTS shift_node;
USE shift_node;
#select * from agendamentos;
#drop database shift_node;

CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    senha VARCHAR(255) NOT NULL,
    telefone VARCHAR(20),
    cpf VARCHAR(14) UNIQUE,
    tipo ENUM('CLIENTE', 'ATENDENTE', 'MECANICO', 'ADMIN'),
    ativo BOOLEAN DEFAULT TRUE,
    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE veiculos (
    id_veiculo INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    nome VARCHAR(100),
    ano YEAR NOT NULL,
    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario)
        REFERENCES usuarios (id)
        ON DELETE CASCADE
);

CREATE TABLE servicos (
    id_servico INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    descricao VARCHAR(255),
    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE agendamentos (
    id_agendamento INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_veiculo INT NOT NULL,
    data_agendamento DATE NOT NULL,
    hora TIME NOT NULL,
    observacoes VARCHAR(100),
    tipo_servico ENUM('Verificar nível de fluídos', 'Trocar óleo do motor e filtro', 'Trocar fluído de freio', 'Trocar fluído de arrefecimento', 'Revisão completa de freios', 'Verificar pastilhas de freio', 'Trocar discos e tambores de freio'),
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario)
        REFERENCES usuarios (id),
    FOREIGN KEY (id_veiculo)
        REFERENCES veiculos (id_veiculo)
);

CREATE TABLE status_os (
    id_status INT AUTO_INCREMENT PRIMARY KEY,
    nome_status VARCHAR(20) NOT NULL UNIQUE,
    descricao VARCHAR(100)
);


DELIMITER //

-- Gerar número único para agendamentos
CREATE TRIGGER trg_numero_agendamento
BEFORE INSERT ON agendamentos
FOR EACH ROW
BEGIN
    IF NEW.numero_agendamento IS NULL THEN
        SET NEW.numero_agendamento = CONCAT('AGD-', UNIX_TIMESTAMP());
    END IF;
    
    IF NEW.hora_fim IS NULL THEN
        SET NEW.hora_fim = ADDTIME(NEW.hora_inicio, '01:00:00');
    END IF;
END//

DELIMITER ;

-- Criar Orçamento
DELIMITER //

CREATE PROCEDURE sp_criar_orcamento (
    IN p_id_cliente INT,
    IN p_id_veiculo INT,
    IN p_id_atendente INT,
    IN p_servicos JSON
)
BEGIN
    DECLARE v_id_orcamento INT;
    DECLARE v_total DECIMAL(10,2) DEFAULT 0;
    DECLARE i INT DEFAULT 0;
    DECLARE v_count INT;
    DECLARE v_servico_id INT;
    DECLARE v_quantidade INT;
    DECLARE v_valor_unitario DECIMAL(10,2);

    INSERT INTO orcamentos (id_cliente, id_veiculo, id_atendente, data_orcamento)
    VALUES (p_id_cliente, p_id_veiculo, p_id_atendente, CURDATE());
    SET v_id_orcamento = LAST_INSERT_ID();

    SELECT JSON_LENGTH(p_servicos) INTO v_count;

    WHILE i < v_count DO
        SET v_servico_id = JSON_UNQUOTE(JSON_EXTRACT(p_servicos, CONCAT('$[', i, '].id_servico')));
        SET v_quantidade = JSON_UNQUOTE(JSON_EXTRACT(p_servicos, CONCAT('$[', i, '].quantidade')));

        SELECT valor_base INTO v_valor_unitario
        FROM servicos
        WHERE id_servico = v_servico_id;

        INSERT INTO orcamento_itens (id_orcamento, id_servico, quantidade, valor_unitario)
        VALUES (v_id_orcamento, v_servico_id, v_quantidade, v_valor_unitario);

        SET v_total = v_total + (v_quantidade * v_valor_unitario);

        SET i = i + 1;
    END WHILE;

    UPDATE orcamentos
    SET valor_total = v_total,
        valor_final = v_total
    WHERE id_orcamento = v_id_orcamento;
END//

DELIMITER ;
